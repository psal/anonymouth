package edu.drexel.psal.jstylo.generics;

import java.util.*;
import com.jgaap.generics.*;

/**
 * The cumulative event culler class applies JGAAP event cullers defined in the given cumulative feature driver instance
 * on the given list of lists of event sets, that should be generated by the given cumulative feature driver.
 * 
 * @author Ariel Stolerman
 *
 */
public class CumulativeEventCuller {
	
	/**
	 * Given a list of lists of event sets and a cumulative feature driver, where each sub-list contains the
	 * event sets that correspond to the underlying event drivers in the cumulative feature driver, it returns the list
	 * of lists of event sets after applying the corresponding event cullers as configured per event driver
	 * in the given cumulative feature driver. 
	 * @param eventSets
	 * 		The list of lists of event sets on which to apply the event cullers.
	 * @param ced
	 * 		The cumulative feature driver that created the given list of lists of event sets, and holds
	 * 		the configuration for the event cullers to apply on the event sets.
	 * @return
	 * 		A new list of lists of event sets after the corresponding event cullers were applied.
	 * @throws EventCullingException 
	 */
	// TODO change in place
	public static List<List<EventSet>> cull(List<List<EventSet>> eventSets, CumulativeFeatureDriver ced) throws EventCullingException {
		int totalSetLists = eventSets.size();
		List<List<EventSet>> res = new ArrayList<List<EventSet>>(totalSetLists);
		for (int i=0; i<totalSetLists; i++)
			res.add(i, new ArrayList<EventSet>());
		int size = ced.numOfFeatureDrivers();
		List<EventSet> tmpEventSets;
		List<EventCuller> cullers;
		
		// save event sets details for after culling
		List<String> authorNames = new ArrayList<String>(totalSetLists);
		List<String> docNames = new ArrayList<String>(totalSetLists);
		List<String> esIds = new ArrayList<String>(totalSetLists);
		for (int i=0; i<totalSetLists; i++) {
			authorNames.add(i,eventSets.get(i).get(0).getAuthor());
			docNames.add(i,eventSets.get(i).get(0).getDocumentName());
			esIds.add(i,eventSets.get(i).get(0).getEventSetID());
		}
		
		for (int i=0; i<size; i++) {
			// get all event sets at position i (generated by the ith event driver in the given cumulative event driver)
			tmpEventSets = new ArrayList<EventSet>();
			for (int j=0; j<totalSetLists; j++)
				tmpEventSets.add(eventSets.get(j).get(i));
			
			// get all cullers for the ith feature driver in the given cumulative feature driver and apply
			cullers = ced.featureDriverAt(i).getCullers();
			if (cullers == null) {
				for (int j=0; j<totalSetLists; j++)
					res.get(j).add(i,tmpEventSets.get(j));
				continue;
			}
			for (EventCuller ec: cullers) {
				tmpEventSets = ec.cull(tmpEventSets);
			}
			for (int j=0; j<totalSetLists; j++) {
				tmpEventSets.get(j).setAuthor(authorNames.get(j));
				tmpEventSets.get(j).setDocumentName(docNames.get(j));
				tmpEventSets.get(j).setEventSetID(esIds.get(j));
				res.get(j).add(i,tmpEventSets.get(j));
			}
		}
				
		return res;
	}
	
	
	/**
	 * Given a list of lists of event sets of the known documents AFTER all event cullers have been applied,
	 * and a list of lists of event sets of the unknown documents, it returns the latter modified with respect to
	 * the culling that was applied on the known event sets. I.e., it removes all events in the unknown sets that
	 * do not appear in the known sets. For each event set that contains only a single event with a numeric value
	 * (i.e. the corresponding feature driver has calcHist set to false), it will do nothing.
	 * @param cfd
	 * 		The cumulative feature driver used for generating the given known and unknown sets.
	 * @param knownSets
	 * 		The list of lists of event sets that were extracted from the known documents after all event cullers were applied.
	 * @param unknownSets
	 * 		The list of lists of event sets that were extracted from the unknown documents.
	 * @return
	 * 		The list of lists of event sets of the unknown documents modified w.r.t. the known sets after culling.
	 */
	public static List<List<EventSet>> cullWithRespectToKnown(CumulativeFeatureDriver cfd, List<List<EventSet>> knownSets, List<List<EventSet>> unknownSets) {
		List<EventSet> oneKnown = knownSets.get(0);
		int numOfUnknown = unknownSets.size();
		int numOfFeatureClasses = oneKnown.size();
		int i, j;
				
		// make sure all unknown sets would have only events that appear in the known sets
		// UNLESS the event set contains a sole numeric value event - in that case take it anyway
		for (i=0; i<numOfFeatureClasses; i++) {
			if (cfd.featureDriverAt(i).isCalcHist()) {
				// initialize set of relevant events
				EventSet es = oneKnown.get(i);
				Set<String> relevantEvents = new HashSet<String>(es.size());
				for (Event e: es)
					relevantEvents.add(e.getEvent());

				// remove all non-relevant events from unknown event sets
				EventSet unknown;
				int initSize;
				Event e;
				for (j=0; j<numOfUnknown; j++) {
					unknown = unknownSets.get(j).get(i);
					initSize = unknown.size();
					for (int k=initSize-1; k>=0; k--) {
						e = unknown.eventAt(k);
						if (!relevantEvents.contains(e.getEvent()))
							unknown.removeEvent(e);
					}
				}
			}
		}
		
		return unknownSets;
	}
}






















